trigger:
  branches:
    include:
    - '*'

schedules:
  - cron: "0 3 * * 0"
    displayName: Weekly Build
    branches:
      include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  versionMajor: 1
  versionMinor: 0
  TerraformVersion: '1.0.11'
  AzTerraformRegion: 'uksouth'
  AzTerraformResourceGroup: 'fm-geolocation-terraform'
  AzTerraformStorageAccount: 'fmgeolocationtfstate'
  AzSubscription: 'Personal-Pay-As-You-Go'

stages:
- stage: dependency_check
  jobs:
  - template: dependency-check.yml
  
- stage: build
  jobs:
  - job: build
    pool:
      vmImage: 'windows-latest'

    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:
    - task: UseDotNet@2
      inputs:
        version: 6.0.x
        performMultiLevelLookup: true
        includePreviewVersions: true
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'config'
        nugetConfigPath: './src/nuget.config'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
      displayName: 'dotnet build $(buildConfiguration)'

    - task: CopyFiles@2
      displayName: 'Copy terraform folder into staging directory'
      inputs: 
        SourceFolder: '$(Build.sourcesDirectory)/terraform'
        Contents: '**'
        TargetFolder: '$(Build.artifactStagingDirectory)/terraform'

    - task: ArchiveFiles@2
      displayName: "Package FM.GeoLocation.FuncApp to artifact staging directory"
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/FM.GeoLocation.FuncApp/bin/Release/net6.0/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/FM.GeoLocation.FuncApp.zip'
        replaceExistingArchive: true

    - task: DotNetCoreCLI@2
      displayName: "Pack FM.GeoLocation.Client"
      inputs:
        command: pack
        packagesToPack: '$(Build.SourcesDirectory)/src/FM.GeoLocation.Client/FM.GeoLocation.Client.csproj'
        packDestination: '$(Build.ArtifactStagingDirectory)'
        buildProperties: 'Version="$(versionMajor).$(versionMinor).$(Build.BuildId)"'

    - task: DotNetCoreCLI@2
      displayName: "Pack FM.GeoLocation.Contract"
      inputs:
        command: pack
        packagesToPack: '$(Build.SourcesDirectory)/src/FM.GeoLocation.Contract/FM.GeoLocation.Contract.csproj'
        packDestination: '$(Build.ArtifactStagingDirectory)'
        buildProperties: 'Version="$(versionMajor).$(versionMinor).$(Build.BuildId)"'

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        publishVstsFeed: 'f6b61452-5280-47a1-b802-b2cfc8630b77/c57e8cd1-2aa2-4c0d-96cb-450405f73d4d'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - publish: $(Build.artifactStagingDirectory)/FM.GeoLocation.FuncApp.zip
      displayName: Publish FM.GeoLocation.FuncApp artifact
      artifact: funcapp

    - publish: $(Build.artifactStagingDirectory)/terraform
      displayName: Publish terraform artifact
      artifact: terraform

- stage: terraform_state_backend
  jobs:
  - job: create_terraform_backend
    pool:
      vmImage: 'windows-latest'

    steps:
    - checkout: none
      displayName: 'Skip checking out source'

    - task: AzureCLI@1
      displayName: 'Create terraform backend in Azure storage'
      inputs:
        azureSubscription: '$(AzSubscription)'
        scriptLocation: inlineScript
        inlineScript: |
          call az group create --location "$(AzTerraformRegion)" --name "$(AzTerraformResourceGroup)"
          call az storage account create --name "$(AzTerraformStorageAccount)" --resource-group "$(AzTerraformResourceGroup)" --location "$(AzTerraformRegion)" --sku "Standard_LRS"
          call az storage container create --name "terraform" --account-name "$(AzTerraformStorageAccount)"

- template: deploy-application.yml
  parameters:
    environment: 'iris'