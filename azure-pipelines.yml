trigger:
  branches:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  versionMajor: 1
  versionMinor: 0

steps:
- task: DotNetCoreCLI@2
  displayName: ".NET Core Restore"
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)/src/FM.GeoLocation.FuncApp/FM.GeoLocation.FuncApp.csproj'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: ".NET Core Build"
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)/src/FM.GeoLocation.FuncApp/FM.GeoLocation.FuncApp.csproj'
    arguments: '-c Release'

- task: CopyFiles@2
  displayName: "Copy terraform to artifact staging directory"
  inputs: 
    SourceFolder: '$(Build.SourcesDirectory)/terraform'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/terraform'

- task: ArchiveFiles@2
  displayName: "Package FM.GeoLocation.FuncApp to artifact staging directory"
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/src/FM.GeoLocation.FuncApp/bin/Release/netcoreapp3.0/'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/FM.GeoLocation.FuncApp.zip'
    replaceExistingArchive: true

- task: DotNetCoreCLI@2
  displayName: "Pack FM.GeoLocation.Client"
  inputs:
    command: pack
    packagesToPack: '$(Build.SourcesDirectory)/src/FM.GeoLocation.Client/FM.GeoLocation.Client.csproj'
    packDestination: '$(Build.ArtifactStagingDirectory)'
    buildProperties: 'Version="$(versionMajor).$(versionMinor).$(Build.BuildId)"'

- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishVstsFeed: 'f6b61452-5280-47a1-b802-b2cfc8630b77/c57e8cd1-2aa2-4c0d-96cb-450405f73d4d'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: "Publish build artifacts"
  inputs:
    PathToPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'